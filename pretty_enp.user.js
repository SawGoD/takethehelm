// ==UserScript==
// @name         Pretty ENP
// @namespace    http://tampermonkey.net/
// @version      0.9.3
// @description  –†–∞–∑–¥–µ–ª –≠–ù–ü —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–µ–µ
// @author       https://t.me/SawGoD
// @match        http://seal-admin.newprod.sopt/devices*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=crcp.ru
// @homepageURL    https://github.com/SawGoD/takethehelm
// @updateURL      https://raw.githubusercontent.com/SawGoD/takethehelm/main/pretty_enp.user.js
// @downloadURL    https://raw.githubusercontent.com/SawGoD/takethehelm/main/pretty_enp.user.js
// ==/UserScript==

;(function () {
    'use strict'

    let visualEnabled = true // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–∑—É–∞–ª–∞
    let autoRefreshEnabled = true // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let autoRefreshInterval = null // –•—Ä–∞–Ω–∏—Ç ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    let countdownInterval = null // –•—Ä–∞–Ω–∏—Ç ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç—Å—á–µ—Ç–∞
    let timeLeft = 50 // –í—Ä–µ–º—è –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    const setColor = (el, color) => {
        if (el && visualEnabled) el.style.color = color
    }

    const replaceWithIcon = (el, isValid) => {
        if (!el) return
        if (visualEnabled) {
            el.innerHTML = isValid || el.innerHTML === 'üü¢' ? 'üü¢' : 'üî¥'
            el.style.fontSize = '1.5em'
            el.style.textAlign = 'center'
        }
    }

    const formatDate = (date) => {
        return date.toISOString().split('T')[0]
    }

    const makeSerialNumberClickable = () => {
        const subtitle = document.querySelector('.page-h1__subtitle')
        if (!subtitle) return

        const text = subtitle.textContent
        const snMatch = text.match(/–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: (\d+)/)
        if (!snMatch) return

        const serialNumber = snMatch[1]
        const cleanInput = serialNumber

        const now = new Date()
        const startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)
        const endDate = new Date(now.getTime() + 24 * 60 * 60 * 1000)

        const url = `http://oper.crcp.ru/vyg21.php?sn=${cleanInput}&sdt=1&d1=${formatDate(startDate)}&d2=${formatDate(endDate)}`

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
        const originalHTML = subtitle.innerHTML
        const newHTML = originalHTML.replace(
            /(–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: )(\d+)/,
            `$1<a href="#" style="text-decoration: underline; color: #0066cc; cursor: pointer;">$2</a>`
        )

        subtitle.innerHTML = newHTML

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        const link = subtitle.querySelector('a')
        if (link) {
            link.addEventListener('click', (e) => {
                e.preventDefault()
                window.open(url, '_blank')
            })
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã
    const openMap = (mapUrl) => {
        let existingMap = document.getElementById('coordinates-map')
        if (existingMap) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π iframe
            const iframe = existingMap.querySelector('iframe')
            if (iframe) {
                iframe.src = mapUrl
            }
            return
        }

        const mapContainer = document.createElement('div')
        mapContainer.id = 'coordinates-map'
        mapContainer.style.cssText = `
            width: 100%;
            height: 400px;
            margin-top: 20px;
            border: 2px solid #ddd;
            border-radius: 8px;
            position: relative;
            background: white;
        `

        const closeBtn = document.createElement('button')
        closeBtn.textContent = '‚úï'
        closeBtn.style.cssText = `
            position: absolute;
            top: 10px;
            right: 10px;
            background: #ff4444;
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            cursor: pointer;
            font-size: 16px;
            z-index: 10001;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0;
        `

        closeBtn.addEventListener('click', () => {
            mapContainer.remove()
        })

        const iframe = document.createElement('iframe')
        iframe.src = mapUrl
        iframe.style.cssText = `
            width: 100%;
            height: 100%;
            border: none;
            border-radius: 8px;
        `

        mapContainer.appendChild(closeBtn)
        mapContainer.appendChild(iframe)

        const table = document.querySelector('.grid-table')
        if (table) {
            table.parentNode.insertBefore(mapContainer, table.nextSibling)
        }
    }

    const processTable = () => {
        const table = document.querySelector('.grid-table')
        if (!table) return

        if (!visualEnabled) return // –ï—Å–ª–∏ –≤–∏–∑—É–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É

        const headers = Array.from(table.querySelectorAll('thead th')).map((th) => th.textContent.trim())
        const colIdx = {
            valid: headers.findIndex((h) => h.includes('–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å')),
            alarm: headers.findIndex((h) => h.includes('–¢—Ä–µ–≤–æ–≥–∞')),
            pinOut: headers.findIndex((h) => h.includes('–®—Ç—ã—Ä—å –∏–∑–≤–ª–µ—á–µ–Ω')),
            pinHack: headers.findIndex((h) => h.includes('–®—Ç—ã—Ä—å –≤–∑–ª–æ–º–∞–Ω')),
            pinSet: headers.findIndex((h) => h.includes('–®—Ç—ã—Ä—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')),
            caseOpen: headers.findIndex((h) => h.includes('–í—Å–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–ø—É—Å–∞')),
            lockFail: headers.findIndex((h) => h.includes('–ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω –∑–∞–º–æ–∫')),
            caseHack: headers.findIndex((h) => h.includes('–ü–æ–ø—ã—Ç–∫–∞ –≤–∑–ª–æ–º–∞ –∫–æ—Ä–ø—É—Å–∞')),
            lockStatus: headers.findIndex((h) => h.includes('–°—Ç–∞—Ç—É—Å –∑–∞–º–∫–∞')),
            acceleration: headers.findIndex((h) => h.includes('–£—Å–∫–æ—Ä–µ–Ω–∏–µ')),
            temperature: headers.findIndex((h) => h.includes('–î–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã')),
            signal: headers.findIndex((h) => h.includes('–ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞')),
            satellites: headers.findIndex((h) => h.includes('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤')),
            battery: headers.findIndex((h) => h.includes('% –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏')),
            status: headers.findIndex((h) => h.includes('–°—Ç–∞—Ç—É—Å –≠–ù–ü')),
            lat: headers.findIndex((h) => h.includes('–®–∏—Ä–æ—Ç–∞')),
            lon: headers.findIndex((h) => h.includes('–î–æ–ª–≥–æ—Ç–∞')),
            latlon: headers.findIndex((h) => h.includes('–®–∏—Ä–æ—Ç–∞/–î–æ–ª–≥–æ—Ç–∞')),
        }
        // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã "–£—Å–∫–æ—Ä–µ–Ω–∏–µ", "–®—Ç—ã—Ä—å –∏–∑–≤–ª–µ—á—ë–Ω" –∏ "–î–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"
        const hideCols = [colIdx.acceleration, colIdx.pinOut, colIdx.temperature].filter((idx) => idx >= 0)
        if (hideCols.length) {
            // –°–∫—Ä—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
            const ths = table.querySelectorAll('thead th')
            hideCols.forEach((idx) => {
                if (ths[idx]) ths[idx].style.display = 'none'
            })
            // –°–∫—Ä—ã—Ç—å –≤—Å–µ —è—á–µ–π–∫–∏ —ç—Ç–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            table.querySelectorAll('tbody tr').forEach((row) => {
                const tds = row.querySelectorAll('td')
                hideCols.forEach((idx) => {
                    if (tds[idx]) tds[idx].style.display = 'none'
                })
            })
        }
        table.querySelectorAll('tbody tr').forEach((row) => {
            const cells = row.querySelectorAll('td')
            if (colIdx.valid >= 0) {
                const el = cells[colIdx.valid].querySelector('span')
                if (el) replaceWithIcon(el, el.textContent.includes('–í–∞–ª–∏–¥–Ω–∞—è'))
            }
            ;[
                { idx: colIdx.alarm, yes: '–î–∞', no: '–ù–µ—Ç' },
                { idx: colIdx.pinHack, yes: '–î–∞', no: '–ù–µ—Ç' },
                { idx: colIdx.caseOpen, yes: '–î–∞', no: '–ù–µ—Ç' },
                { idx: colIdx.lockFail, yes: '–î–∞', no: '–ù–µ—Ç' },
                { idx: colIdx.caseHack, yes: '–î–∞', no: '–ù–µ—Ç' },
            ].forEach(({ idx, yes, no }) => {
                if (idx >= 0) {
                    const el = cells[idx].querySelector('span')
                    if (el) setColor(el, el.textContent.trim() === yes ? 'red' : 'green')
                }
            })
            if (colIdx.pinSet >= 0) {
                const el = cells[colIdx.pinSet].querySelector('span')
                if (el) setColor(el, el.textContent.trim() === '–ù–µ—Ç' ? 'red' : 'green')
            }
            if (colIdx.lockStatus >= 0) {
                const el = cells[colIdx.lockStatus].querySelector('i')
                if (el) {
                    if (el.classList.contains('el-icon-unlock')) {
                        setColor(el, 'red')
                    } else if (el.classList.contains('el-icon-lock')) {
                        setColor(el, 'green')
                    }
                }
            }
            // –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤
            if (colIdx.signal >= 0) {
                const el = cells[colIdx.signal].querySelector('div')
                if (el) {
                    const val = parseInt(el.textContent.trim(), 10)
                    el.style.color = val === 0 ? 'red' : val > 0 ? 'green' : ''
                }
            }
            if (colIdx.satellites >= 0) {
                const el = cells[colIdx.satellites].querySelector('div')
                if (el) {
                    const val = parseInt(el.textContent.trim(), 10)
                    el.style.color = val === 0 ? 'red' : val > 0 ? 'green' : ''
                }
            }
            // –ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏
            if (colIdx.battery >= 0) {
                const el = cells[colIdx.battery].querySelector('div')
                if (el) {
                    const val = parseInt(el.textContent.trim(), 10)
                    el.style.color = val < 25 ? 'red' : val < 50 ? 'orange' : val <= 100 ? 'green' : ''
                }
            }
            // –°—Ç–∞—Ç—É—Å –≠–ù–ü
            if (colIdx.status >= 0) {
                const el = cells[colIdx.status].querySelector('span')
                if (el) {
                    const txt = el.textContent.trim()
                    if (visualEnabled && txt === '–ü–æ–¥ –æ—Ö—Ä–∞–Ω–æ–π') {
                        el.innerHTML = '–û—Ö—Ä–∞–Ω–∞'
                    }
                    el.style.color = txt === '–ü–æ–¥ –æ—Ö—Ä–∞–Ω–æ–π' || txt === '–û—Ö—Ä–∞–Ω–∞' ? 'green' : txt === '–°–æ–Ω' ? 'red' : ''
                }
            }
            // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü "–®–∏—Ä–æ—Ç–∞/–î–æ–ª–≥–æ—Ç–∞"
            if (colIdx.latlon >= 0) {
                const coordCell = cells[colIdx.latlon]
                const latDiv = coordCell.querySelector('div[data-title="–®–∏—Ä–æ—Ç–∞"]')
                const lonDiv = coordCell.querySelector('div[data-title="–î–æ–ª–≥–æ—Ç–∞"]')

                if (latDiv && lonDiv && visualEnabled) {
                    const latSpan = latDiv.querySelector('span')
                    const lonSpan = lonDiv.querySelector('span')

                    if (latSpan && lonSpan) {
                        const latText = latSpan.textContent.trim()
                        const lonText = lonSpan.textContent.trim()

                        const lat = parseFloat(latText.replace(',', '.'))
                        const lon = parseFloat(lonText.replace(',', '.'))

                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∏—Ä–æ—Ç—É
                        if (!isNaN(lat) && lat !== 0) {
                            const latFormatted = lat.toFixed(5)
                            latSpan.textContent = latFormatted.endsWith('.00000') ? latFormatted.slice(0, -4) : latFormatted
                            latSpan.style.color = '#0066cc'
                            latSpan.style.cursor = 'pointer'

                            // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –∏ –¥–µ–ª–∞–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                            latDiv.style.display = 'inline'
                            latDiv.style.marginRight = '10px'

                            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —à–∏—Ä–æ—Ç—ã
                            latSpan.onclick = () => {
                                if (!isNaN(lon) && lon !== 0) {
                                    const mapUrl = `https://www.google.com/maps/embed/v1/place?key=AIzaSyBFw0Qbyq9zTFTd-tUY6dZWTgaQzuU17R8&q=${lat},${lon}&zoom=15`
                                    openMap(mapUrl)
                                }
                            }
                        }

                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ª–≥–æ—Ç—É
                        if (!isNaN(lon) && lon !== 0) {
                            const lonFormatted = lon.toFixed(5)
                            lonSpan.textContent = lonFormatted.endsWith('.00000') ? lonFormatted.slice(0, -4) : lonFormatted
                            lonSpan.style.color = '#0066cc'
                            lonSpan.style.cursor = 'pointer'

                            // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –∏ –¥–µ–ª–∞–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                            lonDiv.style.display = 'inline'

                            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –¥–æ–ª–≥–æ—Ç—ã
                            lonSpan.onclick = () => {
                                if (!isNaN(lat) && lat !== 0) {
                                    const mapUrl = `https://www.google.com/maps/embed/v1/place?key=AIzaSyBFw0Qbyq9zTFTd-tUY6dZWTgaQzuU17R8&q=${lat},${lon}&zoom=15`
                                    openMap(mapUrl)
                                }
                            }
                        }
                    }
                }
            }
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
        const toggleBtn = document.getElementById('toggle-temp-btn')
        if (toggleBtn && colIdx.temperature >= 0) {
            const isVisible = toggleBtn.dataset.tempVisible === 'true'
            const ths = table.querySelectorAll('thead th')
            const rows = table.querySelectorAll('tbody tr')

            if (isVisible) {
                ths[colIdx.temperature].style.display = ''
                rows.forEach((row) => {
                    const tds = row.querySelectorAll('td')
                    if (tds[colIdx.temperature]) tds[colIdx.temperature].style.display = ''
                })
            } else {
                ths[colIdx.temperature].style.display = 'none'
                rows.forEach((row) => {
                    const tds = row.querySelectorAll('td')
                    if (tds[colIdx.temperature]) tds[colIdx.temperature].style.display = 'none'
                })
            }
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º –≤–∏–∑—É–∞–ª–µ
        if (visualEnabled) {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
            table.querySelectorAll('td, th').forEach((cell) => {
                cell.style.padding = '4px 12px'
            })

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            if (colIdx.latlon >= 0) {
                const coordCells = table.querySelectorAll(`td:nth-child(${colIdx.latlon + 1}), th:nth-child(${colIdx.latlon + 1})`)
                coordCells.forEach((cell) => {
                    cell.style.paddingRight = '75px' // –ë–æ–ª—å—à–µ –æ—Ç—Å—Ç—É–ø–∞ —Å–ø—Ä–∞–≤–∞ –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                })
            }

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ —Å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é (—Å–ª–µ–≤–∞)
            if (colIdx.valid >= 0) {
                const validCells = table.querySelectorAll(`td:nth-child(${colIdx.valid + 1}), th:nth-child(${colIdx.valid + 1})`)
                validCells.forEach((cell) => {
                    cell.style.paddingLeft = '20px' // –ë–æ–ª—å—à–µ –æ—Ç—Å—Ç—É–ø–∞ —Å–ª–µ–≤–∞ –æ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
                })
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    const updateRefreshButton = () => {
        const refreshBtn = document.getElementById('auto-refresh-btn')
        if (!refreshBtn) return

        if (autoRefreshEnabled) {
            refreshBtn.innerHTML = timeLeft
            refreshBtn.style.fontSize = '12px'
            refreshBtn.style.fontWeight = 'bold'
        } else {
            refreshBtn.innerHTML = `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.06189 13C4.02104 12.6724 4 12.3387 4 12C4 7.58172 7.58172 4 12 4C14.5006 4 16.7332 5.14727 18.2002 6.94416M19.9381 11C19.979 11.3276 20 11.6613 20 12C20 16.4183 16.4183 20 12 20C9.61061 20 7.46589 18.9525 6 17.2916M9 17H6V17.2916M18.2002 4V6.94416M18.2002 6.94416V6.99993L15.2002 7M6 17.2916V20H9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>`
            refreshBtn.style.fontSize = '14px'
            refreshBtn.style.fontWeight = 'normal'
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const setupAutoRefresh = () => {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        if (autoRefreshInterval) {
            clearInterval(autoRefreshInterval)
            autoRefreshInterval = null
        }
        if (countdownInterval) {
            clearInterval(countdownInterval)
            countdownInterval = null
        }

        if (autoRefreshEnabled) {
            timeLeft = 50 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

            // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            autoRefreshInterval = setInterval(() => {
                window.location.reload()
            }, 50000) // 50000 –º—Å = 50 —Å–µ–∫—É–Ω–¥

            // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            countdownInterval = setInterval(() => {
                timeLeft--
                updateRefreshButton()

                if (timeLeft <= 0) {
                    timeLeft = 50 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                }
            }, 1000) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

            updateRefreshButton()
        } else {
            updateRefreshButton()
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const createControlButtons = () => {
        const table = document.querySelector('.grid-table')
        if (!table) return

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ body —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!document.body) return

        const headers = Array.from(table.querySelectorAll('thead th')).map((th) => th.textContent.trim())
        const tempColIdx = headers.findIndex((h) => h.includes('–î–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã'))

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∞
        if (!document.getElementById('toggle-visual-btn')) {
            const visualBtn = document.createElement('button')
            visualBtn.id = 'toggle-visual-btn'
            visualBtn.textContent = '–û—Ç–∫–ª—é—á–∏—Ç—å'
            visualBtn.style.cssText = `
                position: fixed;
                top: 20px;
                left: 20px;
                background: #dc3545;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px 15px;
                cursor: pointer;
                z-index: 1000;
                font-size: 14px;
            `

            visualBtn.addEventListener('click', () => {
                visualEnabled = !visualEnabled
                visualBtn.textContent = visualEnabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'
                visualBtn.style.background = visualEnabled ? '#dc3545' : '#28a745'

                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–∞–±–ª–∏—Ü—ã
                if (!visualEnabled) {
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏
                    table.querySelectorAll('td span, td div, td i').forEach((el) => {
                        el.style.color = ''
                        if (el.tagName.toLowerCase() === 'span') {
                            if (el.innerHTML === 'üü¢' || el.innerHTML === 'üî¥') {
                                el.innerHTML = el.innerHTML === 'üü¢' ? '–í–∞–ª–∏–¥–Ω–∞—è' : '–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è'
                                el.style.fontSize = ''
                                el.style.textAlign = ''
                            }
                            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
                            if (el.innerHTML === '–û—Ö—Ä–∞–Ω–∞') {
                                el.innerHTML = '–ü–æ–¥ –æ—Ö—Ä–∞–Ω–æ–π'
                            }
                        }
                    })

                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    table.querySelectorAll('td span').forEach((span) => {
                        span.style.cursor = ''
                        span.removeEventListener('click', () => {}) // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                    })

                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—ã
                    table.querySelectorAll('td, th').forEach((el) => {
                        el.style.padding = ''
                        el.style.paddingLeft = ''
                        el.style.paddingRight = ''
                        el.style.minWidth = ''
                    })

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã
                    const ths = table.querySelectorAll('thead th')
                    const rows = table.querySelectorAll('tbody tr')
                    const hideCols = [
                        headers.findIndex((h) => h.includes('–£—Å–∫–æ—Ä–µ–Ω–∏–µ')),
                        headers.findIndex((h) => h.includes('–®—Ç—ã—Ä—å –∏–∑–≤–ª–µ—á–µ–Ω')),
                        tempColIdx,
                    ].filter((idx) => idx >= 0)
                    hideCols.forEach((idx) => {
                        if (idx >= 0) {
                            if (ths[idx]) ths[idx].style.display = ''
                            rows.forEach((row) => {
                                const tds = row.querySelectorAll('td')
                                if (tds[idx]) tds[idx].style.display = ''
                            })
                        }
                    })

                    // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
                    const mapContainer = document.getElementById('coordinates-map')
                    if (mapContainer) mapContainer.remove()

                    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–∞—Ç—á–∏–∫–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    const tempBtn = document.getElementById('toggle-temp-btn')
                    if (tempBtn) tempBtn.style.display = 'none'

                    // –°–∫—Ä—ã–≤–∞–µ–º –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    const refreshBtn = document.getElementById('auto-refresh-btn')
                    if (refreshBtn) {
                        refreshBtn.style.display = 'none'
                        // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        if (autoRefreshEnabled) {
                            autoRefreshEnabled = false
                            setupAutoRefresh() // –≠—Ç–æ –æ—á–∏—Å—Ç–∏—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
                        }
                    }
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–∞—Ç—á–∏–∫–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    const tempBtn = document.getElementById('toggle-temp-btn')
                    if (tempBtn) tempBtn.style.display = ''

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    const refreshBtn = document.getElementById('auto-refresh-btn')
                    if (refreshBtn) {
                        refreshBtn.style.display = ''
                        // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
                        if (!autoRefreshEnabled) {
                            autoRefreshEnabled = true
                            refreshBtn.style.background = '#dc3545'
                            refreshBtn.title = '–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (50—Å)'
                            setupAutoRefresh()
                        }
                    }

                    processTable() // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∏–∑—É–∞–ª –∑–∞–Ω–æ–≤–æ
                }
            })

            document.body.appendChild(visualBtn)
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (!document.getElementById('auto-refresh-btn')) {
            const refreshBtn = document.createElement('button')
            refreshBtn.id = 'auto-refresh-btn'
            refreshBtn.title = autoRefreshEnabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (50—Å)' : '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (50—Å)'
            refreshBtn.style.cssText = `
                position: fixed;
                top: 20px;
                left: 150px;
                background: ${autoRefreshEnabled ? '#dc3545' : '#28a745'};
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px 15px;
                cursor: pointer;
                z-index: 1000;
                font-size: 14px;
                display: flex;
                align-items: center;
                justify-content: center;
                min-width: 50px;
            `

            refreshBtn.addEventListener('click', () => {
                autoRefreshEnabled = !autoRefreshEnabled
                refreshBtn.style.background = autoRefreshEnabled ? '#dc3545' : '#28a745'
                refreshBtn.title = autoRefreshEnabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (50—Å)' : '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (50—Å)'
                setupAutoRefresh()
            })

            document.body.appendChild(refreshBtn)

            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –æ–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ
            if (autoRefreshEnabled) {
                setupAutoRefresh()
            } else {
                updateRefreshButton()
            }
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–∞—Ç—á–∏–∫–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        if (tempColIdx >= 0 && !document.getElementById('toggle-temp-btn')) {
            const toggleBtn = document.createElement('button')
            toggleBtn.id = 'toggle-temp-btn'
            toggleBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã'
            toggleBtn.style.cssText = `
                position: fixed;
                top: 20px;
                left: 220px;
                background: #007bff;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px 15px;
                cursor: pointer;
                z-index: 1000;
                font-size: 14px;
            `

            toggleBtn.addEventListener('click', () => {
                const ths = table.querySelectorAll('thead th')
                const rows = table.querySelectorAll('tbody tr')
                const isVisible = ths[tempColIdx].style.display !== 'none'

                if (isVisible) {
                    // –°–∫—Ä—ã–≤–∞–µ–º
                    ths[tempColIdx].style.display = 'none'
                    rows.forEach((row) => {
                        const tds = row.querySelectorAll('td')
                        if (tds[tempColIdx]) tds[tempColIdx].style.display = 'none'
                    })
                    toggleBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã'
                    toggleBtn.dataset.tempVisible = 'false'
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
                    ths[tempColIdx].style.display = ''
                    rows.forEach((row) => {
                        const tds = row.querySelectorAll('td')
                        if (tds[tempColIdx]) tds[tempColIdx].style.display = ''
                    })
                    toggleBtn.textContent = '–°–∫—Ä—ã—Ç—å –¥–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã'
                    toggleBtn.dataset.tempVisible = 'true'
                }
            })

            document.body.appendChild(toggleBtn)
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const initializeScript = () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (!document.body || !document.querySelector('.grid-table')) {
            return false
        }

        createControlButtons()
        processTable()
        makeSerialNumberClickable()
        return true
    }

    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    document.addEventListener('DOMContentLoaded', initializeScript)

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    setTimeout(() => {
        if (!initializeScript()) {
            setTimeout(initializeScript, 200)
        }
    }, 100)

    setTimeout(() => {
        if (!initializeScript()) {
            setTimeout(initializeScript, 300)
        }
    }, 500)

    setTimeout(initializeScript, 1000)
    setTimeout(initializeScript, 2000)

    // MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM
    const observer = new MutationObserver((mutations) => {
        let shouldInit = false
        mutations.forEach((mutation) => {
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∞—Å—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –∏–ª–∏ –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                mutation.addedNodes.forEach((node) => {
                    if (node.nodeType === 1 && (node.classList?.contains('grid-table') || node.querySelector?.('.grid-table'))) {
                        shouldInit = true
                    }
                })
            }
        })

        if (shouldInit) {
            setTimeout(initializeScript, 100)
        }
    })

    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
    if (document.body) {
        observer.observe(document.body, {
            childList: true,
            subtree: true,
        })
    } else {
        // –ï—Å–ª–∏ body –µ—â–µ –Ω–µ—Ç, –∂–¥–µ–º –µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
        const bodyObserver = new MutationObserver(() => {
            if (document.body) {
                bodyObserver.disconnect()
                observer.observe(document.body, {
                    childList: true,
                    subtree: true,
                })
                initializeScript()
            }
        })
        bodyObserver.observe(document.documentElement, {
            childList: true,
        })
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤–º–µ—Å—Ç–æ MutationObserver
    const intervalId = setInterval(() => {
        processTable()
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–æ–ø–∞–ª–∏
        if (
            !document.getElementById('toggle-visual-btn') ||
            !document.getElementById('auto-refresh-btn') ||
            !document.getElementById('toggle-temp-btn')
        ) {
            createControlButtons()
        }
    }, 200)
})()
