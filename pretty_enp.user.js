// ==UserScript==
// @name         Pretty ENP
// @namespace    http://tampermonkey.net/
// @version      2.6.2
// @description  –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≠–ù–ü –ø–æ —É—Å–ª–æ–≤–∏—è–º,
// @author       https://t.me/SawGoD
// @match        http://seal-admin.newprod.sopt/devices/item/*/telemetry*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=crcp.ru
// @homepageURL    https://github.com/SawGoD/takethehelm
// @updateURL      https://raw.githubusercontent.com/SawGoD/takethehelm/main/pretty_enp.user.js
// @downloadURL    https://raw.githubusercontent.com/SawGoD/takethehelm/main/pretty_enp.user.js
// ==/UserScript==

;(function () {
    'use strict'

    let visualEnabled = true // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–∑—É–∞–ª–∞

    const setColor = (el, color) => {
        if (el && visualEnabled) el.style.color = color
    }

    const replaceWithIcon = (el, isValid) => {
        if (!el) return
        if (visualEnabled) {
            el.innerHTML = isValid || el.innerHTML === 'üü¢' ? 'üü¢' : 'üî¥'
            el.style.fontSize = '1.5em'
            el.style.textAlign = 'center'
        }
    }

    const formatDate = (date) => {
        return date.toISOString().split('T')[0]
    }

    const makeSerialNumberClickable = () => {
        const subtitle = document.querySelector('.page-h1__subtitle')
        if (!subtitle) return

        const text = subtitle.textContent
        const snMatch = text.match(/–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: (\d+)/)
        if (!snMatch) return

        const serialNumber = snMatch[1]
        const cleanInput = serialNumber

        const now = new Date()
        const startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)
        const endDate = new Date(now.getTime() + 24 * 60 * 60 * 1000)

        const url = `http://oper.crcp.ru/vyg21.php?sn=${cleanInput}&sdt=1&d1=${formatDate(startDate)}&d2=${formatDate(endDate)}`

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
        const originalHTML = subtitle.innerHTML
        const newHTML = originalHTML.replace(
            /(–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: )(\d+)/,
            `$1<a href="#" style="text-decoration: underline; color: #0066cc; cursor: pointer;">$2</a>`
        )

        subtitle.innerHTML = newHTML

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        const link = subtitle.querySelector('a')
        if (link) {
            link.addEventListener('click', (e) => {
                e.preventDefault()
                window.open(url, '_blank')
            })
        }
    }

    const processTable = () => {
        const table = document.querySelector('.grid-table')
        if (!table) return

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∞
        if (!document.getElementById('toggle-visual-btn')) {
            const visualBtn = document.createElement('button')
            visualBtn.id = 'toggle-visual-btn'
            visualBtn.textContent = '–û—Ç–∫–ª—é—á–∏—Ç—å'
            visualBtn.style.cssText = `
                position: fixed;
                top: 20px;
                left: 20px;
                background: #dc3545;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px 15px;
                cursor: pointer;
                z-index: 1000;
                font-size: 14px;
            `

            visualBtn.addEventListener('click', () => {
                visualEnabled = !visualEnabled
                visualBtn.textContent = visualEnabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'
                visualBtn.style.background = visualEnabled ? '#dc3545' : '#28a745'

                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–∞–±–ª–∏—Ü—ã
                if (!visualEnabled) {
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏
                    table.querySelectorAll('td span, td div, td i').forEach((el) => {
                        el.style.color = ''
                        if (el.tagName.toLowerCase() === 'span') {
                            if (el.innerHTML === 'üü¢' || el.innerHTML === 'üî¥') {
                                el.innerHTML = el.innerHTML === 'üü¢' ? '–í–∞–ª–∏–¥–Ω–∞—è' : '–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è'
                                el.style.fontSize = ''
                                el.style.textAlign = ''
                            }
                            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
                            if (el.innerHTML === '–û—Ö—Ä–∞–Ω–∞') {
                                el.innerHTML = '–ü–æ–¥ –æ—Ö—Ä–∞–Ω–æ–π'
                            }
                            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                            if (el.parentElement && el.parentElement.matches('div[data-title="–®–∏—Ä–æ—Ç–∞"], div[data-title="–î–æ–ª–≥–æ—Ç–∞"]')) {
                                const link = el.querySelector('a')
                                if (link) {
                                    el.innerHTML = link.textContent
                                }
                            }
                        }
                    })

                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—ã
                    table.querySelectorAll('td, th').forEach((el) => {
                        el.style.padding = ''
                        el.style.minWidth = ''
                    })

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã
                    const ths = table.querySelectorAll('thead th')
                    const rows = table.querySelectorAll('tbody tr')
                    ;[colIdx.acceleration, colIdx.pinOut, colIdx.temperature].forEach((idx) => {
                        if (idx >= 0) {
                            if (ths[idx]) ths[idx].style.display = ''
                            rows.forEach((row) => {
                                const tds = row.querySelectorAll('td')
                                if (tds[idx]) tds[idx].style.display = ''
                            })
                        }
                    })

                    // –£–¥–∞–ª—è–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    table.querySelectorAll('td[data-title="–®–∏—Ä–æ—Ç–∞/–î–æ–ª–≥–æ—Ç–∞"] div span').forEach((span) => {
                        if (span.querySelector('a')) {
                            const text = span.querySelector('a').textContent
                            span.innerHTML = text
                        }
                    })

                    // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
                    const mapContainer = document.getElementById('coordinates-map')
                    if (mapContainer) mapContainer.remove()

                    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–∞—Ç—á–∏–∫–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    const tempBtn = document.getElementById('toggle-temp-btn')
                    if (tempBtn) tempBtn.style.display = 'none'
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–∞—Ç—á–∏–∫–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    const tempBtn = document.getElementById('toggle-temp-btn')
                    if (tempBtn) tempBtn.style.display = ''

                    processTable() // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∏–∑—É–∞–ª –∑–∞–Ω–æ–≤–æ
                }
            })

            document.body.appendChild(visualBtn)
        }

        if (!visualEnabled) return // –ï—Å–ª–∏ –≤–∏–∑—É–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É

        const headers = Array.from(table.querySelectorAll('thead th')).map((th) => th.textContent.trim())
        const colIdx = {
            valid: headers.findIndex((h) => h.includes('–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å')),
            alarm: headers.findIndex((h) => h.includes('–¢—Ä–µ–≤–æ–≥–∞')),
            pinOut: headers.findIndex((h) => h.includes('–®—Ç—ã—Ä—å –∏–∑–≤–ª–µ—á–µ–Ω')),
            pinHack: headers.findIndex((h) => h.includes('–®—Ç—ã—Ä—å –≤–∑–ª–æ–º–∞–Ω')),
            pinSet: headers.findIndex((h) => h.includes('–®—Ç—ã—Ä—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')),
            caseOpen: headers.findIndex((h) => h.includes('–í—Å–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–ø—É—Å–∞')),
            lockFail: headers.findIndex((h) => h.includes('–ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω –∑–∞–º–æ–∫')),
            caseHack: headers.findIndex((h) => h.includes('–ü–æ–ø—ã—Ç–∫–∞ –≤–∑–ª–æ–º–∞ –∫–æ—Ä–ø—É—Å–∞')),
            lockStatus: headers.findIndex((h) => h.includes('–°—Ç–∞—Ç—É—Å –∑–∞–º–∫–∞')),
            acceleration: headers.findIndex((h) => h.includes('–£—Å–∫–æ—Ä–µ–Ω–∏–µ')),
            temperature: headers.findIndex((h) => h.includes('–î–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã')),
            signal: headers.findIndex((h) => h.includes('–ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞')),
            satellites: headers.findIndex((h) => h.includes('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤')),
            battery: headers.findIndex((h) => h.includes('% –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏')),
            status: headers.findIndex((h) => h.includes('–°—Ç–∞—Ç—É—Å –≠–ù–ü')),
            lat: headers.findIndex((h) => h.includes('–®–∏—Ä–æ—Ç–∞')),
            lon: headers.findIndex((h) => h.includes('–î–æ–ª–≥–æ—Ç–∞')),
            latlon: headers.findIndex((h) => h.includes('–®–∏—Ä–æ—Ç–∞/–î–æ–ª–≥–æ—Ç–∞')),
        }
        // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã "–£—Å–∫–æ—Ä–µ–Ω–∏–µ", "–®—Ç—ã—Ä—å –∏–∑–≤–ª–µ—á—ë–Ω" –∏ "–î–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"
        const hideCols = [colIdx.acceleration, colIdx.pinOut, colIdx.temperature].filter((idx) => idx >= 0)
        if (hideCols.length) {
            // –°–∫—Ä—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
            const ths = table.querySelectorAll('thead th')
            hideCols.forEach((idx) => {
                if (ths[idx]) ths[idx].style.display = 'none'
            })
            // –°–∫—Ä—ã—Ç—å –≤—Å–µ —è—á–µ–π–∫–∏ —ç—Ç–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            table.querySelectorAll('tbody tr').forEach((row) => {
                const tds = row.querySelectorAll('td')
                hideCols.forEach((idx) => {
                    if (tds[idx]) tds[idx].style.display = 'none'
                })
            })
        }
        table.querySelectorAll('tbody tr').forEach((row) => {
            const cells = row.querySelectorAll('td')
            if (colIdx.valid >= 0) {
                const el = cells[colIdx.valid].querySelector('span')
                if (el) replaceWithIcon(el, el.textContent.includes('–í–∞–ª–∏–¥–Ω–∞—è'))
            }
            ;[
                { idx: colIdx.alarm, yes: '–î–∞', no: '–ù–µ—Ç' },
                { idx: colIdx.pinHack, yes: '–î–∞', no: '–ù–µ—Ç' },
                { idx: colIdx.caseOpen, yes: '–î–∞', no: '–ù–µ—Ç' },
                { idx: colIdx.lockFail, yes: '–î–∞', no: '–ù–µ—Ç' },
                { idx: colIdx.caseHack, yes: '–î–∞', no: '–ù–µ—Ç' },
            ].forEach(({ idx, yes, no }) => {
                if (idx >= 0) {
                    const el = cells[idx].querySelector('span')
                    if (el) setColor(el, el.textContent.trim() === yes ? 'red' : 'green')
                }
            })
            if (colIdx.pinSet >= 0) {
                const el = cells[colIdx.pinSet].querySelector('span')
                if (el) setColor(el, el.textContent.trim() === '–ù–µ—Ç' ? 'red' : 'green')
            }
            if (colIdx.lockStatus >= 0) {
                const el = cells[colIdx.lockStatus].querySelector('i')
                if (el) {
                    if (el.classList.contains('el-icon-unlock')) {
                        setColor(el, 'red')
                    } else if (el.classList.contains('el-icon-lock')) {
                        setColor(el, 'green')
                    }
                }
            }
            // –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤
            if (colIdx.signal >= 0) {
                const el = cells[colIdx.signal].querySelector('div')
                if (el) {
                    const val = parseInt(el.textContent.trim(), 10)
                    el.style.color = val === 0 ? 'red' : val > 0 ? 'green' : ''
                }
            }
            if (colIdx.satellites >= 0) {
                const el = cells[colIdx.satellites].querySelector('div')
                if (el) {
                    const val = parseInt(el.textContent.trim(), 10)
                    el.style.color = val === 0 ? 'red' : val > 0 ? 'green' : ''
                }
            }
            // –ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏
            if (colIdx.battery >= 0) {
                const el = cells[colIdx.battery].querySelector('div')
                if (el) {
                    const val = parseInt(el.textContent.trim(), 10)
                    el.style.color = val < 25 ? 'red' : val < 50 ? 'orange' : val <= 100 ? 'green' : ''
                }
            }
            // –°—Ç–∞—Ç—É—Å –≠–ù–ü
            if (colIdx.status >= 0) {
                const el = cells[colIdx.status].querySelector('span')
                if (el) {
                    const txt = el.textContent.trim()
                    if (visualEnabled && txt === '–ü–æ–¥ –æ—Ö—Ä–∞–Ω–æ–π') {
                        el.innerHTML = '–û—Ö—Ä–∞–Ω–∞'
                    }
                    el.style.color = txt === '–ü–æ–¥ –æ—Ö—Ä–∞–Ω–æ–π' || txt === '–û—Ö—Ä–∞–Ω–∞' ? 'green' : txt === '–°–æ–Ω' ? 'red' : ''
                }
            }
            // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: —à–∏—Ä–æ—Ç–∞ –∏ –¥–æ–ª–≥–æ—Ç–∞ ‚Äî 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ (–¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω–æ–π —è—á–µ–π–∫–µ)
            if (colIdx.latlon >= 0) {
                // –í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –∏—â–µ–º div —Å data-title="–®–∏—Ä–æ—Ç–∞" –∏ "–î–æ–ª–≥–æ—Ç–∞"
                const latDiv = cells[colIdx.latlon].querySelector('div[data-title="–®–∏—Ä–æ—Ç–∞"] span')
                if (latDiv) {
                    const num = parseFloat(latDiv.textContent.replace(',', '.'))
                    if (!isNaN(num)) {
                        const formatted = num === 0 ? '0' : num.toFixed(5)
                        latDiv.textContent = formatted.endsWith('.00000') ? formatted.slice(0, -4) : formatted
                    }
                }
                const lonDiv = cells[colIdx.latlon].querySelector('div[data-title="–î–æ–ª–≥–æ—Ç–∞"] span')
                if (lonDiv) {
                    const num = parseFloat(lonDiv.textContent.replace(',', '.'))
                    if (!isNaN(num)) {
                        const formatted = num === 0 ? '0' : num.toFixed(5)
                        lonDiv.textContent = formatted.endsWith('.00000') ? formatted.slice(0, -4) : formatted
                    }
                }

                // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
                const latSpan = cells[colIdx.latlon].querySelector('div[data-title="–®–∏—Ä–æ—Ç–∞"] span')
                const lonSpan = cells[colIdx.latlon].querySelector('div[data-title="–î–æ–ª–≥–æ—Ç–∞"] span')

                if (latSpan && lonSpan && visualEnabled) {
                    const lat = parseFloat(latSpan.textContent.replace(',', '.'))
                    const lon = parseFloat(lonSpan.textContent.replace(',', '.'))

                    if (!isNaN(lat) && !isNaN(lon) && lat !== 0 && lon !== 0) {
                        const mapUrl = `https://www.google.com/maps/embed/v1/place?key=AIzaSyBFw0Qbyq9zTFTd-tUY6dZWTgaQzuU17R8&q=${lat},${lon}&zoom=15`

                        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —à–∏—Ä–æ—Ç—ã
                        const latLink = document.createElement('a')
                        latLink.href = '#'
                        latLink.style.textDecoration = 'underline'
                        latLink.style.color = '#0066cc'
                        latLink.textContent = latSpan.textContent

                        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–ª–≥–æ—Ç—ã
                        const lonLink = document.createElement('a')
                        lonLink.href = '#'
                        lonLink.style.textDecoration = 'underline'
                        lonLink.style.color = '#0066cc'
                        lonLink.textContent = lonSpan.textContent

                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                        const openInModal = (e) => {
                            e.preventDefault()

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–∞ –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
                            let existingMap = document.getElementById('coordinates-map')
                            if (existingMap) {
                                // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º iframe —Å –Ω–æ–≤—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                                const iframe = existingMap.querySelector('iframe')
                                if (iframe) {
                                    iframe.src = mapUrl
                                }
                                return
                            }

                            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç—ã –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
                            const mapContainer = document.createElement('div')
                            mapContainer.id = 'coordinates-map'
                            mapContainer.style.cssText = `
                                width: 100%;
                                height: 400px;
                                margin-top: 20px;
                                border: 2px solid #ddd;
                                border-radius: 8px;
                                position: relative;
                                background: white;
                            `

                            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
                            const closeBtn = document.createElement('button')
                            closeBtn.textContent = '‚úï'
                            closeBtn.style.cssText = `
                                position: absolute;
                                top: 10px;
                                right: 10px;
                                background: #ff4444;
                                color: white;
                                border: none;
                                border-radius: 50%;
                                width: 30px;
                                height: 30px;
                                cursor: pointer;
                                font-size: 16px;
                                z-index: 10001;
                            `

                            // –°–æ–∑–¥–∞–µ–º iframe
                            const iframe = document.createElement('iframe')
                            iframe.src = mapUrl
                            iframe.style.cssText = `
                                width: 100%;
                                height: 100%;
                                border: none;
                                border-radius: 8px;
                            `

                            // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã
                            mapContainer.appendChild(closeBtn)
                            mapContainer.appendChild(iframe)

                            // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ —Ç–∞–±–ª–∏—Ü—ã
                            const table = document.querySelector('.grid-table')
                            if (table) {
                                table.parentNode.insertBefore(mapContainer, table.nextSibling)
                            }

                            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
                            const closeMap = () => {
                                const mapToClose = document.getElementById('coordinates-map')
                                if (mapToClose) {
                                    mapToClose.remove()
                                }
                            }

                            closeBtn.addEventListener('click', closeMap)
                        }

                        latLink.addEventListener('click', openInModal)
                        lonLink.addEventListener('click', openInModal)

                        // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                        latSpan.innerHTML = ''
                        latSpan.appendChild(latLink)

                        lonSpan.innerHTML = ''
                        lonSpan.appendChild(lonLink)
                    }
                }
            }
        })

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        if (colIdx.temperature >= 0 && !document.getElementById('toggle-temp-btn')) {
            const toggleBtn = document.createElement('button')
            toggleBtn.id = 'toggle-temp-btn'
            toggleBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã'
            toggleBtn.style.cssText = `
                position: fixed;
                top: 20px;
                left: 150px;
                background: #007bff;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px 15px;
                cursor: pointer;
                z-index: 1000;
                font-size: 14px;
            `

            toggleBtn.addEventListener('click', () => {
                const ths = table.querySelectorAll('thead th')
                const rows = table.querySelectorAll('tbody tr')
                const isVisible = ths[colIdx.temperature].style.display !== 'none'

                if (isVisible) {
                    // –°–∫—Ä—ã–≤–∞–µ–º
                    ths[colIdx.temperature].style.display = 'none'
                    rows.forEach((row) => {
                        const tds = row.querySelectorAll('td')
                        if (tds[colIdx.temperature]) tds[colIdx.temperature].style.display = 'none'
                    })
                    toggleBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã'
                    toggleBtn.dataset.tempVisible = 'false'
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
                    ths[colIdx.temperature].style.display = ''
                    rows.forEach((row) => {
                        const tds = row.querySelectorAll('td')
                        if (tds[colIdx.temperature]) tds[colIdx.temperature].style.display = ''
                    })
                    toggleBtn.textContent = '–°–∫—Ä—ã—Ç—å –¥–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã'
                    toggleBtn.dataset.tempVisible = 'true'
                }
            })

            document.body.appendChild(toggleBtn)
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
        const toggleBtn = document.getElementById('toggle-temp-btn')
        if (toggleBtn && colIdx.temperature >= 0) {
            const isVisible = toggleBtn.dataset.tempVisible === 'true'
            const ths = table.querySelectorAll('thead th')
            const rows = table.querySelectorAll('tbody tr')

            if (isVisible) {
                ths[colIdx.temperature].style.display = ''
                rows.forEach((row) => {
                    const tds = row.querySelectorAll('td')
                    if (tds[colIdx.temperature]) tds[colIdx.temperature].style.display = ''
                })
            } else {
                ths[colIdx.temperature].style.display = 'none'
                rows.forEach((row) => {
                    const tds = row.querySelectorAll('td')
                    if (tds[colIdx.temperature]) tds[colIdx.temperature].style.display = 'none'
                })
            }
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º –≤–∏–∑—É–∞–ª–µ
        if (visualEnabled) {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            if (colIdx.latlon >= 0) {
                const latlonCells = table.querySelectorAll(`td:nth-child(${colIdx.latlon + 1}), th:nth-child(${colIdx.latlon + 1})`)
                latlonCells.forEach((cell) => {
                    cell.style.minWidth = '200px'
                    cell.style.padding = '8px 16px'
                })
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
            table.querySelectorAll('td, th').forEach((cell) => {
                cell.style.padding = '8px 12px'
            })
        }
    }

    document.addEventListener('DOMContentLoaded', processTable)
    setTimeout(processTable, 500)
    setTimeout(makeSerialNumberClickable, 700)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤–º–µ—Å—Ç–æ MutationObserver
    const intervalId = setInterval(processTable, 200)
})()
